{
	"info": {
		"_postman_id": "fb454623-c044-4ef0-acee-6a8a0a426cff",
		"name": "REST APIs-VARIABLES",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5040522",
		"_collection_link": "https://www.postman.com/kiranmm/workspace/isha9pm/collection/5040522-fb454623-c044-4ef0-acee-6a8a0a426cff?action=share&source=collection_link&creator=5040522"
	},
	"item": [
		{
			"name": "POSITIVE TESTING",
			"item": [
				{
					"name": "LIST USERS API-USING COLLECTION VARIABLES",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if the response code = 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response time from the server is < 3seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response header Content-Type=application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if name[0]=Apsara Saini\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].name).to.eql(\"Apsara Saini\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if gender[2]=female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[2].gender).to.eql(\"female\");\r",
									"});\r",
									"\r",
									"console.log(\"Welcome to Postman API automation testing\");\r",
									"console.log(\"The response code received from server is \"+pm.response.code);\r",
									"console.log(\"The response message received from server is \"+pm.response.status);\r",
									"console.log(\"The response time received from server is \"+pm.response.responseTime);\r",
									"console.log(\"The response body received from server is \");\r",
									"console.log(pm.response.json());\r",
									"console.log(\"The response body size received from server is \");\r",
									"console.log(pm.response.size());\r",
									"console.log(\"The response headers received from server are \"+pm.response.headers);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// the below 3 lines of code will delete the collection variables\r",
									"\r",
									"pm.collectionVariables.unset(\"cProtocol\");\r",
									"pm.collectionVariables.unset(\"cBaseURL\");\r",
									"pm.collectionVariables.unset(\"cToken\");\r",
									"\r",
									"// the below 3 lines of code will create the collection variables & assign the values\r",
									"\r",
									"pm.collectionVariables.set(\"cProtocol\", \"https\");\r",
									"pm.collectionVariables.set(\"cBaseURL\", \"gorest.co.in\");\r",
									"pm.collectionVariables.set(\"cToken\", \"ba27e6bcbebdb6672d44749409fa9d17d58e44177848fa7079a86ee037657094\");\r",
									"\r",
									"// the below 3 lines of code will print the values of collection variables\r",
									"\r",
									"console.log(\"The value of collection variable cProtocol is \"+pm.collectionVariables.get(\"cProtocol\"));\r",
									"console.log(\"The value of collection variable cBaseURL is \"+pm.collectionVariables.get(\"cBaseURL\"));\r",
									"console.log(\"The value of collection variable cToken is \"+pm.collectionVariables.get(\"cToken\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{cToken}}"
							}
						],
						"url": {
							"raw": "{{cProtocol}}://{{cBaseURL}}/public/v2/users",
							"protocol": "{{cProtocol}}",
							"host": [
								"{{cBaseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE USER API-USING GLOBAL VARIABLES",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if status code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if gender is [male, female]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status is [active, inactive]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// the below line of code shall delete the gToken global variable\r",
									"pm.globals.unset(\"gToken\");\r",
									"\r",
									"// the below line of code shall create a global variable gToken\r",
									"pm.globals.set(\"gToken\", \"ba27e6bcbebdb6672d44749409fa9d17d58e44177848fa7079a86ee037657094\");\r",
									"\r",
									"// the below lines of code shall print the global variable values\r",
									"\r",
									"console.log(\"The value of global variable gGender is \"+pm.globals.get(\"gGender\"));\r",
									"console.log(\"The value of global variable gStatus is \"+pm.globals.get(\"gStatus\"));\r",
									"console.log(\"The value of global variable gToken is \"+pm.globals.get(\"gToken\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Syed\",\r\n    \"gender\": \"{{gGender}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"{{gStatus}}\"\r\n}"
						},
						"url": {
							"raw": "https://gorest.co.in/{{gPath}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"{{gPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE USER API-USING ENVIRONMENT VARIABLES",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if gender is [male, female]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status is [active, inactive]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"console.log(\"The HTTP method used in the API request is \"+pm.request.method);\r",
									"console.log(\"The API URL in the request is \"+pm.request.url);\r",
									"console.log(\"The API request name is \"+pm.info.requestName);\r",
									"console.log(\"The request headers in the request are \"+pm.request.headers);\r",
									"console.log(\"The request body is \");\r",
									"console.log(pm.request.body);\r",
									"console.log(\"The API request size is \");\r",
									"console.log(pm.request.size());\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"console.log(\"The data type of id field is \"+typeof(responseBody.id));\r",
									"console.log(\"The data type of email field is \"+typeof(responseBody.email));\r",
									"console.log(\"The data type of name field is \"+typeof(responseBody.name));\r",
									"console.log(\"The data type of status field is \"+typeof(responseBody.status));\r",
									"console.log(\"The data type of gender field is \"+typeof(responseBody.gender));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// below lines of code shall delete the environment variables\r",
									"\r",
									"pm.environment.unset(\"envID\");\r",
									"pm.environment.unset(\"envName\");\r",
									"pm.environment.unset(\"envEmail\");\r",
									"\r",
									"// below lines of code shall create the environment variables & their values\r",
									"\r",
									"pm.environment.set(\"envID\", \"6800637\");\r",
									"pm.environment.set(\"envName\", \"Kiran\");\r",
									"pm.environment.set(\"envEmail\", \"kiran@postman.com\");\r",
									"\r",
									"// below lines of code shall print the environment variable values\r",
									"\r",
									"console.log(\"The value of env variable envID is \"+pm.environment.get(\"envID\"));\r",
									"console.log(\"The value of env variable envName is \"+pm.environment.get(\"envName\"));\r",
									"console.log(\"The value of env variable envEmail is \"+pm.environment.get(\"envEmail\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer ba27e6bcbebdb6672d44749409fa9d17d58e44177848fa7079a86ee037657094"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{envName}}\",\r\n    \"email\": \"{{envEmail}}\",\r\n    \"status\": \"inactive\"\r\n}"
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{envID}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{envID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE USER API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if status code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is empty\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer ba27e6bcbebdb6672d44749409fa9d17d58e44177848fa7079a86ee037657094"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/6785125",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"6785125"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "E2E API AUTOMATION",
			"item": [
				{
					"name": "CREATE A USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if status code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if gender is [male, female]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status is [active, inactive]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// below is the code for API chaining\r",
									"var jsonBody = pm.response.json();\r",
									"var extractedID = jsonBody.id;\r",
									"var extractedName = jsonBody.name;\r",
									"var extractedEmail = jsonBody.email;\r",
									"\r",
									"pm.globals.set(\"globalID\", extractedID);\r",
									"pm.globals.set(\"globalName\", extractedName);\r",
									"pm.globals.set(\"globalEmail\", extractedEmail);\r",
									"\r",
									"// CONDITIONAL STATEMENTS & POSTMAN WORKFLOWS\r",
									"\r",
									"if (pm.response.code==201) {\r",
									"    console.log(pm.info.requestName+\" API has PASSED\");\r",
									"    postman.setNextRequest(\"VALIDATE IF USER IS CREATED\");\r",
									"}\r",
									"else {\r",
									"    console.log(pm.info.requestName+\" API has FAILED\");\r",
									"    postman.setNextRequest(\"\");     // to stop the execution\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer ba27e6bcbebdb6672d44749409fa9d17d58e44177848fa7079a86ee037657094"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}"
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "VALIDATE IF USER IS CREATED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if the response code = 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response time from the server is < 3seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response header Content-Type=application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if user is created successfully with id =  \"+pm.globals.get(\"globalID\"), function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].id).to.eql(pm.globals.get(\"globalID\"));\r",
									"});\r",
									"\r",
									"// CONDITIONAL STATEMENTS & POSTMAN WORKFLOWS\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"    console.log(pm.info.requestName+\" API has PASSED\");\r",
									"    postman.setNextRequest(\"UPDATE THIS CREATED USER\");\r",
									"}\r",
									"else {\r",
									"    console.log(pm.info.requestName+\" API has FAILED\");\r",
									"    postman.setNextRequest(\"\");     // to stop the execution\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer ba27e6bcbebdb6672d44749409fa9d17d58e44177848fa7079a86ee037657094"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE THIS CREATED USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if gender is [male, female]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status is [active, inactive]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// below is the code for API chaining\r",
									"var jsonBody = pm.response.json();\r",
									"var extractedStatus = jsonBody.status;\r",
									"pm.globals.set(\"globalStatus\", extractedStatus);\r",
									"\r",
									"// CONDITIONAL STATEMENTS & POSTMAN WORKFLOWS\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"    console.log(pm.info.requestName+\" API has PASSED\");\r",
									"    postman.setNextRequest(\"VALIDATE IF USER IS UPDATED\");\r",
									"}\r",
									"else {\r",
									"    console.log(pm.info.requestName+\" API has FAILED\");\r",
									"    postman.setNextRequest(\"\");     // to stop the execution\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer ba27e6bcbebdb6672d44749409fa9d17d58e44177848fa7079a86ee037657094"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomNamePrefix}}{{globalName}}\",\r\n    \"email\": \"{{globalEmail}}\",\r\n    \"status\": \"inactive\"\r\n}"
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{globalID}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{globalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "VALIDATE IF USER IS UPDATED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if the response code = 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response time from the server is < 3seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response header Content-Type=application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if user is updated successfully with id = \"+pm.globals.get(\"globalID\")+\" with status = \"+pm.globals.get(\"globalStatus\"), function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].status).to.eql(pm.globals.get(\"globalStatus\"));\r",
									"});\r",
									"\r",
									"// CONDITIONAL STATEMENTS & POSTMAN WORKFLOWS\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"    console.log(pm.info.requestName+\" API has PASSED\");\r",
									"    postman.setNextRequest(\"DELETE THIS UPDATED USER\");\r",
									"}\r",
									"else {\r",
									"    console.log(pm.info.requestName+\" API has FAILED\");\r",
									"    postman.setNextRequest(\"\");     // to stop the execution\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer ba27e6bcbebdb6672d44749409fa9d17d58e44177848fa7079a86ee037657094"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE THIS UPDATED USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if status code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is empty\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"// CONDITIONAL STATEMENTS & POSTMAN WORKFLOWS\r",
									"\r",
									"if (pm.response.code==204) {\r",
									"    console.log(pm.info.requestName+\" API has PASSED\");\r",
									"    postman.setNextRequest(\"VALIDATE IF USER IS DELETED\");\r",
									"}\r",
									"else {\r",
									"    console.log(pm.info.requestName+\" API has FAILED\");\r",
									"    postman.setNextRequest(\"\");     // to stop the execution\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer ba27e6bcbebdb6672d44749409fa9d17d58e44177848fa7079a86ee037657094"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{globalID}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{globalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "VALIDATE IF USER IS DELETED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if the response code = 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response time from the server is < 3seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response header Content-Type=application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if user is deleted successfully with id = \"+pm.globals.get(\"globalID\"), function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].id).to.not.eql(pm.globals.get(\"globalID\"));\r",
									"});\r",
									"\r",
									"// CONDITIONAL STATEMENTS & POSTMAN WORKFLOWS\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"    console.log(pm.info.requestName+\" API has PASSED\");\r",
									"    postman.setNextRequest(\"\");     // to stop the execution\r",
									"}\r",
									"else {\r",
									"    console.log(pm.info.requestName+\" API has FAILED\");\r",
									"    postman.setNextRequest(\"\");     // to stop the execution\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer ba27e6bcbebdb6672d44749409fa9d17d58e44177848fa7079a86ee037657094"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DATA DRIVEN AUTOMATION",
			"item": [
				{
					"name": "CREATE A USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if status code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if gender is [male, female]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status is [active, inactive]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// below is the code for API chaining\r",
									"var jsonBody = pm.response.json();\r",
									"var extractedID = jsonBody.id;\r",
									"var extractedName = jsonBody.name;\r",
									"var extractedEmail = jsonBody.email;\r",
									"\r",
									"pm.globals.set(\"globalID\", extractedID);\r",
									"pm.globals.set(\"globalName\", extractedName);\r",
									"pm.globals.set(\"globalEmail\", extractedEmail);\r",
									"\r",
									"// CONDITIONAL STATEMENTS & POSTMAN WORKFLOWS\r",
									"\r",
									"if (pm.response.code==201) {\r",
									"    console.log(pm.info.requestName+\" API has PASSED\");\r",
									"    postman.setNextRequest(\"VALIDATE IF USER IS CREATED\");\r",
									"}\r",
									"else {\r",
									"    console.log(pm.info.requestName+\" API has FAILED\");\r",
									"    postman.setNextRequest(\"\");     // to stop the execution\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer ba27e6bcbebdb6672d44749409fa9d17d58e44177848fa7079a86ee037657094"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{name}}\",\r\n    \"gender\": \"{{gender}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"status\": \"{{status}}\"\r\n}"
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "VALIDATE IF USER IS CREATED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if the response code = 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response time from the server is < 3seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response header Content-Type=application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if user is created successfully with id =  \"+pm.globals.get(\"globalID\"), function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].id).to.eql(pm.globals.get(\"globalID\"));\r",
									"});\r",
									"\r",
									"// CONDITIONAL STATEMENTS & POSTMAN WORKFLOWS\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"    console.log(pm.info.requestName+\" API has PASSED\");\r",
									"    postman.setNextRequest(\"UPDATE THIS CREATED USER\");\r",
									"}\r",
									"else {\r",
									"    console.log(pm.info.requestName+\" API has FAILED\");\r",
									"    postman.setNextRequest(\"\");     // to stop the execution\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer ba27e6bcbebdb6672d44749409fa9d17d58e44177848fa7079a86ee037657094"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE THIS CREATED USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if gender is [male, female]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status is [active, inactive]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// below is the code for API chaining\r",
									"var jsonBody = pm.response.json();\r",
									"var extractedStatus = jsonBody.status;\r",
									"pm.globals.set(\"globalStatus\", extractedStatus);\r",
									"\r",
									"// CONDITIONAL STATEMENTS & POSTMAN WORKFLOWS\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"    console.log(pm.info.requestName+\" API has PASSED\");\r",
									"    postman.setNextRequest(\"VALIDATE IF USER IS UPDATED\");\r",
									"}\r",
									"else {\r",
									"    console.log(pm.info.requestName+\" API has FAILED\");\r",
									"    postman.setNextRequest(\"\");     // to stop the execution\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer ba27e6bcbebdb6672d44749409fa9d17d58e44177848fa7079a86ee037657094"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomNamePrefix}}{{globalName}}\",\r\n    \"email\": \"{{globalEmail}}\",\r\n    \"status\": \"inactive\"\r\n}"
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{globalID}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{globalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "VALIDATE IF USER IS UPDATED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if the response code = 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response time from the server is < 3seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response header Content-Type=application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if user is updated successfully with id = \"+pm.globals.get(\"globalID\")+\" with status = \"+pm.globals.get(\"globalStatus\"), function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].status).to.eql(pm.globals.get(\"globalStatus\"));\r",
									"});\r",
									"\r",
									"// CONDITIONAL STATEMENTS & POSTMAN WORKFLOWS\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"    console.log(pm.info.requestName+\" API has PASSED\");\r",
									"    postman.setNextRequest(\"DELETE THIS UPDATED USER\");\r",
									"}\r",
									"else {\r",
									"    console.log(pm.info.requestName+\" API has FAILED\");\r",
									"    postman.setNextRequest(\"\");     // to stop the execution\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer ba27e6bcbebdb6672d44749409fa9d17d58e44177848fa7079a86ee037657094"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE THIS UPDATED USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if status code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is empty\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"// CONDITIONAL STATEMENTS & POSTMAN WORKFLOWS\r",
									"\r",
									"if (pm.response.code==204) {\r",
									"    console.log(pm.info.requestName+\" API has PASSED\");\r",
									"    postman.setNextRequest(\"VALIDATE IF USER IS DELETED\");\r",
									"}\r",
									"else {\r",
									"    console.log(pm.info.requestName+\" API has FAILED\");\r",
									"    postman.setNextRequest(\"\");     // to stop the execution\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer ba27e6bcbebdb6672d44749409fa9d17d58e44177848fa7079a86ee037657094"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{globalID}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{globalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "VALIDATE IF USER IS DELETED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if the response code = 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response time from the server is < 3seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response header Content-Type=application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if user is deleted successfully with id = \"+pm.globals.get(\"globalID\"), function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].id).to.not.eql(pm.globals.get(\"globalID\"));\r",
									"});\r",
									"\r",
									"// CONDITIONAL STATEMENTS & POSTMAN WORKFLOWS\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"    console.log(pm.info.requestName+\" API has PASSED\");\r",
									"    postman.setNextRequest(\"\");     // to stop the execution\r",
									"}\r",
									"else {\r",
									"    console.log(pm.info.requestName+\" API has FAILED\");\r",
									"    postman.setNextRequest(\"\");     // to stop the execution\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer ba27e6bcbebdb6672d44749409fa9d17d58e44177848fa7079a86ee037657094"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "NEGATIVE TESTING",
			"item": [
				{
					"name": "UNSUPPORTED HTTP METHODS",
					"item": [
						{
							"name": "LIST USERS API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code = 4xx client error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer ba27e6bcbebdb6672d44749409fa9d17d58e44177848fa7079a86ee037657094"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code = 4xx client error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer ba27e6bcbebdb6672d44749409fa9d17d58e44177848fa7079a86ee037657094"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Syed\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"syed5@gmail.com\",\r\n    \"status\": \"active\"\r\n}"
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code = 4xx client error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer ba27e6bcbebdb6672d44749409fa9d17d58e44177848fa7079a86ee037657094"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Ramneet Kaur\",\r\n    \"email\": \"ramneet@gmail.com\",\r\n    \"status\": \"active\"\r\n}"
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users/6784597",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users",
										"6784597"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code = 4xx client error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer ba27e6bcbebdb6672d44749409fa9d17d58e44177848fa7079a86ee037657094"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v2/users/6785125",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users",
										"6785125"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "BROKEN END POINTS TESTING",
					"item": [
						{
							"name": "LIST USERS API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code = 4xx client error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer ba27e6bcbebdb6672d44749409fa9d17d58e44177848fa7079a86ee037657094"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v1/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code = 4xx client error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer ba27e6bcbebdb6672d44749409fa9d17d58e44177848fa7079a86ee037657094"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Syed\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"syed5@gmail.com\",\r\n    \"status\": \"active\"\r\n}"
								},
								"url": {
									"raw": "https://gorest.co.in/public/v1/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code = 4xx client error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer ba27e6bcbebdb6672d44749409fa9d17d58e44177848fa7079a86ee037657094"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Ramneet Kaur\",\r\n    \"email\": \"ramneet@gmail.com\",\r\n    \"status\": \"active\"\r\n}"
								},
								"url": {
									"raw": "https://gorest.co.in/public/v1/users/6784597",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v1",
										"users",
										"6784597"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code = 4xx client error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer ba27e6bcbebdb6672d44749409fa9d17d58e44177848fa7079a86ee037657094"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v1/users/6797898",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v1",
										"users",
										"6797898"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PAYLOAD TAMPERING",
					"item": [
						{
							"name": "CREATE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code = 4xx client error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer ba27e6bcbebdb6672d44749409fa9d17d58e44177848fa7079a86ee037657094"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": 12345,\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}"
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code = 4xx client error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer ba27e6bcbebdb6672d44749409fa9d17d58e44177848fa7079a86ee037657094"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"87676^$^%$%\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}"
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code = 4xx client error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer ba27e6bcbebdb6672d44749409fa9d17d58e44177848fa7079a86ee037657094"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Kiran is the trainer for API automation testing using Postman and Newman tool\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}"
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code = 4xx client error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer ba27e6bcbebdb6672d44749409fa9d17d58e44177848fa7079a86ee037657094"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Kiran\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\",\r\n    \"mobile\" : \"9898989898\",\r\n    \"my hobbies\" : \"dancing\"\r\n}"
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "cProtocol",
			"value": ""
		},
		{
			"key": "cBaseURL",
			"value": ""
		},
		{
			"key": "cToken",
			"value": ""
		}
	]
}